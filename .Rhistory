network(spls.result,cutoff = 0.65)
spls.result = spls(X = mrna.c, Y = prot.c, ncomp = 3, keepX  = c(10,5,1), keepY = c(9,5,1) )
network(spls.result,cutoff = 0.65)
png("network_plot_spls.png")
network(spls.result,cutoff = 0.65)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
png("network_plot_spls.png")
network(spls.result,cutoff = 0.65)
dev.off()
png("cim_plot_spls.png")
cim(spls.result)
dev.off()
network(omics.block.pls, cutoff = 0.65, name.save = "img/block-pls", save = "png")
omics.block.pls = block.pls(X = x.data, Y = y.data, ncomp = 2)
library("MASS")
#library("tidyverse")
library("mixOmics")
#library("timeOmics")
mirna = read.csv("ParisDiderot_202010/mirna.csv", header = T)
row.names(mirna) = mirna[,1]
mirna = mirna[,-1]
#dim(mirna)
mrna = read.csv("ParisDiderot_202010/mrna.csv", header = T)
row.names(mrna) = mrna[,1]
mrna = mrna[,-1]
#dim(mrna)
prot = read.csv("ParisDiderot_202010/protein.csv", header = T)
row.names(prot) = prot[,1]
prot = prot[,-1]
#dim(prot)
sample = read.csv("ParisDiderot_202010/sample_group.csv", header = T)
#dim(sample)
coeff_variation = function(vec){
return(sd(vec) / mean(vec))
}
truehist(apply(mirna, 2, coeff_variation), xlab = "Distribution du coeffcicient de variation - mirna")
truehist(apply(mrna, 2, coeff_variation), xlab = "Distribution du coeffcicient de variation - mrna")
truehist(apply(prot, 2, coeff_variation), xlab = "Distribution du coeffcicient de variation - proteine")
mirna.c = mirna[,which(abs(apply(mirna, 2, coeff_variation)) >= 0.15)]
#dim(mirna)
#dim(mirna.c)
mrna.c = mrna[,which(abs(apply(mrna, 2, coeff_variation)) >= 0.15)]
#dim(mrna)
#dim(mrna.c)
prot.c = prot[,which(abs(apply(prot, 2, coeff_variation)) >= 0.15)]
#dim(prot)
#dim(prot.c)
mrna.pca = tune.pca(X = mrna.c, ncomp = 50, center = F, scale = F)
mrna.pca = tune.pca(X = mrna.c, ncomp = 50, center = T, scale = T)
mrna.pca$cum.var
mrna.pca = pca(X = mrna.c, ncomp = 30, center = T, scale = T)
plotVar(mrna.pca, comp = c(1,2), var.names = T)
#plotVar(mrna.pca, comp = c(1,3), var.names = T)
var1pca = selectVar(mrna.pca, comp = 1)$value
name.var1pca = row.names(var1pca)[0:10]
vec_col = as.numeric(as.factor(sample$Y))
plotIndiv(mrna.pca, group = vec_col, legend = T, title = "Individus selon les 2 premieres composantes d'une pca")
spca.mrna = spca(mrna.c, ncomp = 3, center = TRUE, scale = TRUE,
keepX = c(10, 5, 15))
var1spca = selectVar(spca.mrna, comp = 1)$value
name.var1spca = row.names(var1spca)
var2spca = selectVar(spca.mrna, comp = 2)$value
name.var2spca = row.names(var2spca)
pls.result = pls(X = mrna.c, Y = prot.c, ncomp = 3)
png("img/scatter_plot_pls.png")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = vec_col+1, ylab = "composante 3",xlab = "composante 2", main = "comparaisons des composantes 1 et 2 avec les groupes\n d'echantillons affiches en couleur.")
legend(x = 10, y = 8, legend = names(table(sample$Y)), col = c(2,3,4), lty = 1)
dev.off()
png("img/arrow_plot_pls.png")
plotArrow(pls.result, comp = c(1,3), X.label =  "comp1", Y.label = "comp3",col = vec_col+1, title = "Arrow plot des composantes 1 et 3")
legend(x = 5, y = 9, legend = names(table(sample$Y)), col = c(2,3,4), lty = 1)
dev.off()
dev.off()
spls.result = spls(X = mrna.c, Y = prot.c, ncomp = 3, keepX  = c(10,5,1), keepY = c(9,5,1) )
var3spls = c(selectVar(spls.result, comp = 3)$X$name,
selectVar(spls.result, comp = 3)$Y$name)
png("img/cim_plot_spls.png")
cim(spls.result)
dev.off()
png("img/network_plot_spls.png")
network(spls.result,cutoff = 0.65)
dev.off()
x.data = list(mrna = mrna.c, prot = prot.c)
y.data = as.matrix(as.data.frame(mirna.c))
omics.block.pls = block.pls(X = x.data, Y = y.data, ncomp = 2)
#omics.block.pls
#selectVar(omics.block.pls, comp = 1)
#selectVar(omics.block.pls, comp = 2)
plotVar(omics.block.pls)
plotLoadings(omics.block.pls)
network(omics.block.pls, cutoff = 0.65, name.save = "img/block-pls", save = "png")
design = matrix(1, ncol = length(x.data), nrow = length(x.data),
dimnames = list(names(x.data), names(data)))
diag(design) = 0
#design
list.keepX = list(mrna = c(10, 5), prot = c(9, 4))
list.keepY = c(7, 3)
omics.block.spls = block.spls(X = x.data, Y = y.data, ncomp = c(2), keepX = list.keepX, keepY = list.keepY, design = design)
#omics.block.spls
#selectVar(omics.block.spls, comp = 1)
#selectVar(omics.block.spls, comp = 2)
plotVar(omics.block.spls)
plotLoadings(omics.block.spls)
network(omics.block.spls, cutoff = 0.65, name.save = "img/block-spls", save = "png")
mrna.selected = selectVar(omics.block.spls, comp = 1)$mrna$name
prot.selected = selectVar(omics.block.spls, comp = 1)$prot$name
mirna.selected = selectVar(omics.block.spls, comp = 1)$Y$name
plsda.mrna = plsda(mrna.c, sample$Y, ncomp = 2)
plotIndiv(plsda.mrna, legend = T,
title = "Individus selon les 2 premieres composantes d'une PLS-DA")
list.of.all = list(mrna = mrna.c, prot = prot.c, mirna = mirna.c)
block.splsda.all = block.splsda(list.of.all,
Y = sample$Y, ncomp = 5)
plotIndiv(block.splsda.all, legend = T)
perf.splsda = perf(block.splsda.all)
#Block PLS-DA avec keepX
list.keepX = list(mrna = c(15,10), prot = c(15,10), mirna = c(15,10))
block.splsda.keepX = block.splsda(list.of.all,
Y = sample$Y, ncomp = 2,
keepX = list.keepX)
plotIndiv(block.splsda.keepX, legend = T)
# Circosplot
circosPlot(block.splsda.keepX, cutoff = 0.5)
dev.off()
install.packages("kableExtra")
mirna = read.csv("ParisDiderot_202010/mirna.csv", header = T)
row.names(mirna) = mirna[,1]
mirna = mirna[,-1]
dim(mirna)
mrna = read.csv("ParisDiderot_202010/mrna.csv", header = T)
row.names(mrna) = mrna[,1]
mrna = mrna[,-1]
dim(mrna)
prot = read.csv("ParisDiderot_202010/protein.csv", header = T)
row.names(prot) = prot[,1]
prot = prot[,-1]
dim(prot)
sample = read.csv("ParisDiderot_202010/sample_group.csv", header = T)
dim(sample)
dim(mirna)
dim(mrna)
dim(prot)
mirna = read.csv("ParisDiderot_202010/mirna.csv", header = T)
row.names(mirna) = mirna[,1]
mirna = mirna[,-1]
dim(mirna)
mrna = read.csv("ParisDiderot_202010/mrna.csv", header = T)
row.names(mrna) = mrna[,1]
mrna = mrna[,-1]
dim(mrna)
prot = read.csv("ParisDiderot_202010/protein.csv", header = T)
row.names(prot) = prot[,1]
prot = prot[,-1]
dim(prot)
coeff_variation = function(vec){
return(sd(vec) / mean(vec))
}
truehist(apply(mirna, 2, coeff_variation), xlab = "Distribution du coeffcicient de variation - mirna")
library("MASS")
#library("tidyverse")
library("mixOmics")
truehist(apply(mirna, 2, coeff_variation), xlab = "Distribution du coeffcicient de variation - mirna")
truehist(apply(mrna, 2, coeff_variation), xlab = "Distribution du coeffcicient de variation - mrna")
truehist(apply(prot, 2, coeff_variation), xlab = "Distribution du coeffcicient de variation - proteine")
truehist(apply(mirna, 2, coeff_variation), xlab = "Distribution du coeffcicient de variation - mirna", col="#8b1538")
truehist(apply(prot, 2, coeff_variation), xlab = "Distribution du coeffcicient de variation - proteine",
col="#8b1538")
truehist(apply(mirna, 2, coeff_variation), xlab = "Distribution du coeffcicient de variation - mirna",
col="#8b1538")
truehist(apply(mrna, 2, coeff_variation), xlab = "Distribution du coeffcicient de variation - mrna",
col="#8b1538")
truehist(apply(prot, 2, coeff_variation), xlab = "Distribution du coeffcicient de variation - proteine",
col="#8b1538")
mirna = read.csv("ParisDiderot_202010/mirna.csv", header = T)
row.names(mirna) = mirna[,1]
mirna = mirna[,-1]
dim(mirna)
library("MASS")
#BiocManager::install("timeOmics")
install.packages("bookdown")
install.packages("bookdown")
#BiocManager::install("timeOmics")
install.packages("MASS")
library("MASS")
#library("tidyverse")
library("mixOmics")
mirna = read.csv("ParisDiderot_202010/mirna.csv", header = T)
row.names(mirna) = mirna[,1]
mirna = mirna[,-1]
dim(mirna)
mrna = read.csv("ParisDiderot_202010/mrna.csv", header = T)
row.names(mrna) = mrna[,1]
mrna = mrna[,-1]
dim(mrna)
prot = read.csv("ParisDiderot_202010/protein.csv", header = T)
row.names(prot) = prot[,1]
prot = prot[,-1]
dim(prot)
sample = read.csv("ParisDiderot_202010/sample_group.csv", header = T)
dim(sample)
coeff_variation = function(vec){
return(sd(vec) / mean(vec))
}
coeff_variation = function(vec){
return(sd(vec) / mean(vec))
}
truehist(apply(mirna, 2, coeff_variation), xlab = "Distribution du coeffcicient de variation - mirna",
col="#8b1538")
truehist(apply(mrna, 2, coeff_variation), xlab = "Distribution du coeffcicient de variation - mrna",
col="#8b1538")
truehist(apply(prot, 2, coeff_variation), xlab = "Distribution du coeffcicient de variation - proteine",
col="#8b1538")
#library("timeOmics")
install.packages("evaluate")
install.packages("evaluate")
#library("tidyverse")
library("mixOmics")
#library("tidyverse")
library("mixOmics")
#library("timeOmics")
```
#library("tidyverse")
library("mixOmics")
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("mixOmics")
#BiocManager::install("timeOmics")
ininstall.packages("rmarkdown")
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("mixOmics")
#BiocManager::install("timeOmics")
install.packages("rmarkdown")
install.packages("rmarkdown")
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("mixOmics")
#BiocManager::install("timeOmics")
install.packages("tinytex")
mirna.c = mirna[,which(abs(apply(mirna, 2, coeff_variation)) >= 0.15)]
dim(mirna)
dim(mirna.c)
mirna = read.csv("ParisDiderot_202010/mirna.csv", header = T)
row.names(mirna) = mirna[,1]
mirna = mirna[,-1]
dim(mirna)
mrna = read.csv("ParisDiderot_202010/mrna.csv", header = T)
row.names(mrna) = mrna[,1]
mrna = mrna[,-1]
dim(mrna)
prot = read.csv("ParisDiderot_202010/protein.csv", header = T)
row.names(prot) = prot[,1]
prot = prot[,-1]
dim(prot)
sample = read.csv("ParisDiderot_202010/sample_group.csv", header = T)
dim(sample)
truehist(apply(mirna, 2, coeff_variation), xlab = "mirna", col="#8b1538")
#library("tidyverse")
library("mixOmics")
truehist(apply(mirna, 2, coeff_variation), xlab = "mirna", col="#8b1538")
truehist(apply(mrna, 2, coeff_variation), xlab = "mrna", col="#8b1538")
coeff_variation = function(vec){
return(sd(vec) / mean(vec))
}
truehist(apply(mirna, 2, coeff_variation), xlab = "mirna", col="#8b1538")
truehist(apply(mrna, 2, coeff_variation), xlab = "mrna", col="#8b1538")
truehist(apply(prot, 2, coeff_variation), xlab = "Proteine", col="#8b1538")
mirna.c = mirna[,which(abs(apply(mirna, 2, coeff_variation)) >= 0.15)]
dim(mirna)
dim(mirna.c)
mrna.c = mrna[,which(abs(apply(mrna, 2, coeff_variation)) >= 0.15)]
dim(mrna)
dim(mrna.c)
prot.c = prot[,which(abs(apply(prot, 2, coeff_variation)) >= 0.15)]
dim(prot)
dim(prot.c)
dim(mirna)
dim(mirna.c)
mrna.pca = tune.pca(X = mrna.c, ncomp = 50, center = F, scale = F)
mrna.pca = tune.pca(X = mrna.c, ncomp = 50, center = F, scale = F, col="#8b1538")
mrna.pca = tune.pca(X = mrna.c, ncomp = 50, center = F, scale = F)
mrna.pca
mrna.pca = tune.pca(X = mrna.c, center = F, scale = F)
mrna.pca = tune.pca(X = mrna.c, ncomp = 50, center = F, scale = F)
mrna.pca = tune.pca(X = mrna.c, ncomp = 50, center = T, scale = T)
mrna.pca$cum.var
mrna.pca = tune.pca(X = mrna.c, ncomp = 50, center = T, scale = T)
mrna.pca$cum.var
mrna.pca = tune.pca(X = mrna.c, ncomp = 50, center = F, scale = F)
mrna.pca$rotation
truehist(mrna.pca$rotation)
truehist(mrna.pca$cum.var)
mrna.pca = tune.pca(X = mrna.c, ncomp = 50, center = F, scale = F)
mrna.pca = tune.pca(X = mrna.c, ncomp = 50, center = F, scale = F)
truehist(mrna.pca$cum.var)
plot(mrna.pca$cum.var)
mrna.pca = tune.pca(X = mrna.c, ncomp = 50, center = F, scale = F)
plot(mrna.pca$cum.var)
plot(mrna.pca$cum.var, mrna.pca$ncomp)
?tune.pca
mrna.pca
mrna.pca$cum.var
mrna.pca = tune.pca(X = mrna.c, ncomp = 50, center = T, scale = T)
mrna.pca = pca(X = mrna.c, ncomp = 30, center = T, scale = T)
plotVar(mrna.pca, comp = c(1,2), var.names = T)
#plotVar(mrna.pca, comp = c(1,3), var.names = T)
var1pca = selectVar(mrna.pca, comp = 1)$value
name.var1pca = row.names(var1pca)[0:10]
name.var1pca = row.names(var1pca)[0:10]
name.var1pca
vec_col = as.numeric(as.factor(sample$Y))
plotIndiv(mrna.pca, group = vec_col, legend = T, title = "Individus selon composantes 1-2 pca")
plotIndiv(mrna.pca, group = vec_col, legend = T, title = "")
plotIndiv(mrna.pca, group = vec_col, legend = T)
plotIndiv(mrna.pca, group = vec_col, legend = T, title = "")
spca.mrna = spca(mrna.c, ncomp = 3, center = TRUE, scale = TRUE,
keepX = c(10, 5, 15))
var1spca = selectVar(spca.mrna, comp = 1)$value
name.var1spca = row.names(var1spca)
var2spca = selectVar(spca.mrna, comp = 2)$value
name.var2spca = row.names(var2spca)
name.var1spca
name.var2spca
mrna.pca
plotVar(spca.mrna, comp = c(1,2), var.names = T)
name.var1spca
name.var2spca
plotVar(mrna.pca, comp = c(1,2), var.names = T)
plotVar(mrna.pca, comp = c(1,2), var.names = T, col = "#8b1538")
plotVar(spca.mrna, comp = c(1,2), var.names = T, col = "#8b1538")
plotVar(spca.mrna, comp = c(1,2), var.names = T, col = "#8b1538",
+ cex.lab=1)
plotVar(spca.mrna, comp = c(1,2), var.names = T, col = "#8b1538",
+ cex=1)
plotVar(spca.mrna, comp = c(1,2), var.names = T, col = "#8b1538",
+ cex=1)
plotVar(spca.mrna, comp = c(1,2), var.names = T, col = "#8b1538", cex=1)
plotVar(spca.mrna, comp = c(1,2), var.names = T, col = "#8b1538", cex=2)
plotVar(spca.mrna, comp = c(1,2), var.names = T, col = "#8b1538", cex=5)
plotVar(spca.mrna, comp = c(1,2), var.names = T, col = "#8b1538", cex=3)
plotVar(spca.mrna, comp = c(1,2), var.names = T, col = "#8b1538", cex=3.5)
plotVar(spca.mrna, comp = c(1,2), var.names = T, col = "#8b1538", cex=3.9)
pls.result = pls(X = mrna.c, Y = prot.c, ncomp = 3)
png("img/scatter_plot_pls.png")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = vec_col+1, ylab = "composante 3",xlab = "composante 2", main = "comparaisons des composantes 1 et 2 avec les groupes\n d'echantillons affiches en couleur.")
legend(x = 10, y = 8, legend = names(table(sample$Y)), col = c(2,3,4), lty = 1)
dev.off()
dev.off()
png("img/scatter_plot_pls.png")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = vec_col+1, ylab = "composante 3",xlab = "composante 2", main = "comparaisons des composantes 1 et 2 avec les groupes\n d'echantillons affiches en couleur.")
legend(x = 10, y = 8, legend = names(table(sample$Y)), col = c(2,3,4), lty = 1)
dev.off()
png("img/arrow_plot_pls.png")
plotArrow(pls.result, comp = c(1,3), X.label =  "comp1", Y.label = "comp3",col = vec_col+1, title = "Arrow plot des composantes 1 et 3")
legend(x = 5, y = 9, legend = names(table(sample$Y)), col = c(2,3,4), lty = 1)
dev.off()
dev.off()
png("img/scatter_plot_pls.png")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = vec_col+1, ylab = "composante 3",xlab = "composante 2", main = "")
legend(x = 10, y = 8, legend = names(table(sample$Y)), col = c(2,3,4), lty = 1)
dev.off()
plotArrow(pls.result, comp = c(1,3), X.label =  "comp1", Y.label = "comp3",col = vec_col+1, title = "")
png("img/arrow_plot_pls.png")
plotArrow(pls.result, comp = c(1,3), X.label =  "comp1", Y.label = "comp3",col = vec_col+1, title = "")
legend(x = 5, y = 9, legend = names(table(sample$Y)), col = c(2,3,4), lty = 1)
dev.off()
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = vec_col+1, ylab = "composante 3",xlab = "composante 2", main = "")
png("img/scatter_plot_pls.png")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = vec_col+1, ylab = "composante 3",xlab = "composante 2", main = "")
legend(x = 10, y = 8, legend = names(table(sample$Y)), col = c(2,3,4), lty = 1)
dev.off()
png("img/arrow_plot_pls.png")
plotArrow(pls.result, comp = c(1,3), X.label =  "comp1", Y.label = "comp3",col = vec_col+1, title = "")
legend(x = 5, y = 9, legend = names(table(sample$Y)), col = c(2,3,4), lty = 1)
dev.off()
spls.result = spls(X = mrna.c, Y = prot.c, ncomp = 3, keepX  = c(10,5,1), keepY = c(9,5,1) )
var3spls = c(selectVar(spls.result, comp = 3)$X$name,
selectVar(spls.result, comp = 3)$Y$name)
png("img/cim_plot_spls.png")
cim(spls.result)
dev.off()
network(spls.result,cutoff = 0.65, name.save = "img/network_plot_spls", save = "png")
x.data = list(mrna = mrna.c, prot = prot.c)
y.data = as.matrix(as.data.frame(mirna.c))
omics.block.pls = block.pls(X = x.data, Y = y.data, ncomp = 2)
omics.block.pls
selectVar(omics.block.pls, comp = 1)
selectVar(omics.block.pls, comp = 2)
plotVar(omics.block.pls)
plotLoadings(omics.block.pls)
network(omics.block.pls, cutoff = 0.65, name.save = "img/block-pls", save = "png")
design = matrix(1, ncol = length(x.data), nrow = length(x.data),
dimnames = list(names(x.data), names(data)))
diag(design) = 0
design
list.keepX = list(mrna = c(10, 5), prot = c(9, 4))
list.keepY = c(7, 3)
omics.block.spls = block.spls(X = x.data, Y = y.data, ncomp = c(2), keepX = list.keepX, keepY = list.keepY, design = design)
omics.block.spls
plotVar(omics.block.spls)
plotLoadings(omics.block.spls)
network(omics.block.spls, cutoff = 0.65, name.save = "img/block-spls", save = "png")
mrna.selected = selectVar(omics.block.spls, comp = 1)$mrna$name
prot.selected = selectVar(omics.block.spls, comp = 1)$prot$name
mirna.selected = selectVar(omics.block.spls, comp = 1)$Y$name
plsda.mrna = plsda(mrna.c, sample$Y, ncomp = 2)
plotIndiv(plsda.mrna, legend = T,
title = "Individus selon composantes 1-2 PLS-DA")
plotIndiv(plsda.mrna, legend = T, title = "")
list.of.all = list(mrna = mrna.c, prot = prot.c, mirna = mirna.c)
block.splsda.all = block.splsda(list.of.all,
Y = sample$Y, ncomp = 5)
plotIndiv(block.splsda.all, legend = T)
plotIndiv(block.splsda.all, legend = T)
perf.splsda = perf(block.splsda.all)
#Block PLS-DA avec keepX
list.keepX = list(mrna = c(15,10), prot = c(15,10), mirna = c(15,10))
block.splsda.keepX = block.splsda(list.of.all,
Y = sample$Y, ncomp = 2,
keepX = list.keepX)
plotIndiv(block.splsda.keepX, legend = T)
plotIndiv(block.splsda.all, legend = T)
plotIndiv(block.splsda.keepX, legend = T)
plotIndiv(block.splsda.keepX, legend = T)
plotIndiv(block.splsda.keepX, legend = T)
# Circosplot
circosPlot(block.splsda.keepX, cutoff = 0.5)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, include=FALSE, cache=FALSE, fig.align="center", fig.show="asis", fig.pos="H")
# Chunk 3: library_load
#library("tidyverse")
library("mixOmics")
#library("timeOmics")
# Chunk 4
mirna = read.csv("ParisDiderot_202010/mirna.csv", header = T)
row.names(mirna) = mirna[,1]
mirna = mirna[,-1]
dim(mirna)
mrna = read.csv("ParisDiderot_202010/mrna.csv", header = T)
row.names(mrna) = mrna[,1]
mrna = mrna[,-1]
dim(mrna)
prot = read.csv("ParisDiderot_202010/protein.csv", header = T)
row.names(prot) = prot[,1]
prot = prot[,-1]
dim(prot)
sample = read.csv("ParisDiderot_202010/sample_group.csv", header = T)
dim(sample)
# Chunk 5
coeff_variation = function(vec){
return(sd(vec) / mean(vec))
}
# Chunk 6
truehist(apply(mirna, 2, coeff_variation), xlab = "mirna", col="#8b1538")
# Chunk 7
truehist(apply(mrna, 2, coeff_variation), xlab = "mrna", col="#8b1538")
# Chunk 8
truehist(apply(prot, 2, coeff_variation), xlab = "Proteine", col="#8b1538")
# Chunk 9
mirna.c = mirna[,which(abs(apply(mirna, 2, coeff_variation)) >= 0.15)]
dim(mirna)
dim(mirna.c)
mrna.c = mrna[,which(abs(apply(mrna, 2, coeff_variation)) >= 0.15)]
dim(mrna)
dim(mrna.c)
prot.c = prot[,which(abs(apply(prot, 2, coeff_variation)) >= 0.15)]
dim(prot)
dim(prot.c)
# Chunk 10
mrna.pca = tune.pca(X = mrna.c, ncomp = 50, center = F, scale = F)
mrna.pca
# Chunk 11
mrna.pca = tune.pca(X = mrna.c, ncomp = 50, center = T, scale = T)
# Chunk 12
mrna.pca$cum.var
# Chunk 13
mrna.pca = pca(X = mrna.c, ncomp = 30, center = T, scale = T)
#plotVar(mrna.pca, comp = c(1,3), var.names = T)
var1pca = selectVar(mrna.pca, comp = 1)$value
name.var1pca = row.names(var1pca)[0:10]
# Chunk 14
plotVar(mrna.pca, comp = c(1,2), var.names = T, col = "#8b1538")
# Chunk 15
vec_col = as.numeric(as.factor(sample$Y))
# Chunk 16
plotIndiv(mrna.pca, group = vec_col, legend = T, title = "")
# Chunk 17
spca.mrna = spca(mrna.c, ncomp = 3, center = TRUE, scale = TRUE,
keepX = c(10, 5, 15))
var1spca = selectVar(spca.mrna, comp = 1)$value
name.var1spca = row.names(var1spca)
var2spca = selectVar(spca.mrna, comp = 2)$value
name.var2spca = row.names(var2spca)
# Chunk 18
plotVar(spca.mrna, comp = c(1,2), var.names = T, col = "#8b1538", cex=3.9)
pls.result = pls(X = mrna.c, Y = prot.c, ncomp = 3)
pls.result
knitr::include_graphics("img/scatter_plot_pls.png")
mrna.c
prot.c
colnames(prot.c)
colnames(prot.c) == "AR"
colnames(prot.c) == "C1QB"
colnames(mrna.c) == "C1QB"
pls.result = pls(X = mrna.c, Y = prot.c, ncomp = 3)
sample
sample$Y
sample
