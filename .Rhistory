protein = read.csv("protein.csv")
row.names(protein) = protein[,1]
protein = protein[,-1]
sample_group = read.csv("sample_group.csv")
# Fonction de coefficient de variation
coeff_var = function(vec_val){
return(sd(vec_val)/mean(vec_val))
}
truehist(apply(mirna, 2, coeff_var), xlab = "Coefficient variation mirna")
truehist(apply(mrna, 2, coeff_var), xlab = "Coefficient variation mrna")
truehist(apply(protein, 2, coeff_var), xlab = "Coefficient variation protein")
# Filtrage des données
new_mirna = mirna[,(which(abs(apply(mirna, 2, coeff_var)) > 0.15))]
new_mrna = mrna[,(which(abs(apply(mrna, 2, coeff_var)) > 0.15))]
new_protein = protein[,(which(abs(apply(protein, 2, coeff_var)) > 0.15))]
# Ttrouver le gène avec la plus grand coefficient de variation
which(max(apply(new_mrna, 2, coeff_var)) == apply(new_mrna, 2, coeff_var))
# Gène avec le plus grand coefficient de variance : PLCD4
# Phospholipase C enzymes play a critical role in many cellular
# processes by hydrolyzing phosphatidylinositol 4,5-bisphosphate
# into two intracellular second messengers, inositol 1,4,5-trisphosphate
# and diacylglycerol. Expression of this gene may be a marker for cancer.
# Chromosome 2
# Longueur séquence 30 749 nucléotides
# Longueur acides aminés de la protéine Q9BRC7 762
# PCA
pca.mrna = pca(new_mrna, ncomp = 30, center = TRUE, scale = TRUE)
pca.mrna$cum.var
plotVar(pca.mrna, var.names = FALSE)
vec_col = as.numeric(as.factor(sample_group$Y))
plotIndiv(pca.mrna, col = vec_col+1)
selectVar(pca.mrna, comp = 1)$value
# SPCA
spca.mrna = spca(new_mrna, ncomp = 3, center = TRUE, scale = TRUE,
keepX = c(10, 5, 15))
plotVar(spca.mrna)
plotIndiv(spca.mrna, col = vec_col+1)
plotVar(spca.mrna)
plotIndiv(spca.mrna, col = vec_col+1)
vec_col = as.numeric(as.factor(sample_group$Y))
setwd("/Users/MAEL/Documents/M2_BI/Genomique/omiques_floobits/droit_joly/ParisDiderot_202010")
require(MASS)
library(mixOmics)
# Préparation des données
mirna = read.csv("ParisDiderot_202010/mirna.csv")
row.names(mirna) = mirna[,1]
mirna = mirna[,-1]
mrna = read.csv("ParisDiderot_202010/mrna.csv")
row.names(mrna) = mrna[,1]
mrna = mrna[,-1]
protein = read.csv("ParisDiderot_202010/protein.csv")
row.names(protein) = protein[,1]
protein = protein[,-1]
sample_group = read.csv("ParisDiderot_202010/sample_group.csv")
# Fonction de coefficient de variation
coeff_var = function(vec_val){
return(sd(vec_val)/mean(vec_val))
}
truehist(apply(mirna, 2, coeff_var), xlab = "Coefficient variation mirna")
truehist(apply(mrna, 2, coeff_var), xlab = "Coefficient variation mrna")
truehist(apply(protein, 2, coeff_var), xlab = "Coefficient variation protein")
# Filtrage des données
new_mirna = mirna[,(which(abs(apply(mirna, 2, coeff_var)) > 0.15))]
new_mrna = mrna[,(which(abs(apply(mrna, 2, coeff_var)) > 0.15))]
new_protein = protein[,(which(abs(apply(protein, 2, coeff_var)) > 0.15))]
# Ttrouver le gène avec la plus grand coefficient de variation
which(max(apply(new_mrna, 2, coeff_var)) == apply(new_mrna, 2, coeff_var))
# Gène avec le plus grand coefficient de variance : PLCD4
# Phospholipase C enzymes play a critical role in many cellular
# processes by hydrolyzing phosphatidylinositol 4,5-bisphosphate
# into two intracellular second messengers, inositol 1,4,5-trisphosphate
# and diacylglycerol. Expression of this gene may be a marker for cancer.
# Chromosome 2
# Longueur séquence 30 749 nucléotides
# Longueur acides aminés de la protéine Q9BRC7 762
# PCA
pca.mrna = pca(new_mrna, ncomp = 30, center = TRUE, scale = TRUE)
pca.mrna$cum.var
plotVar(pca.mrna, var.names = FALSE)
vec_col = as.numeric(as.factor(sample_group$Y))
plotIndiv(pca.mrna, col = vec_col+1)
selectVar(pca.mrna, comp = 1)$value
# SPCA
spca.mrna = spca(new_mrna, ncomp = 3, center = TRUE, scale = TRUE,
keepX = c(10, 5, 15))
plotVar(spca.mrna)
plotIndiv(spca.mrna, col = vec_col+1)
vec_col
plotIndiv(spca.mrna, col = vec_col+1, legend = T)
plotIndiv(spca.mrna, group = vec_col, legend = T)
plotIndiv(spca.mrna, col.per.group = vec_col,legend = T)
plotIndiv(spca.mrna, group = vec_col, legend = T)
# Gènes sélectionnés
selectVar(spca.mrna, comp = 1)$value
selectVar(spca.mrna, comp = 2)$value
install.packages('bookdown')
#plotVar(mrna.pca, comp = c(1,3), var.names = F)
vec_col = as.numeric(as.factor(sample$Y))
plotIndiv(pca.mrna, col = vec_col+1)
plotIndiv(spca.mrna, group = vec_col, legend = T)
selectVar(pca.mrna, comp = 1)$value
plotIndiv(pca.mrna, group = vec_col, legend = T, title = "Individus selon les 2 premieres composantes principales d'une pca")
vec_col = as.numeric(as.factor(sample$Y))
spca.mrna = spca(new_mrna, ncomp = 3, center = TRUE, scale = TRUE,
keepX = c(10, 5, 15))
selectVar(pca.mrna, comp = 1)$value
selectVar(spca.mrna, comp = 1)$value
selectVar(spca.mrna, comp = 1)$value
selectVar(spca.mrna, comp = 2)$value
vec_col = as.numeric(as.factor(sample$Y))
plotIndiv(mrna.pca, group = vec_col, legend = T, title = "Individus selon les 2 premieres composantes d'une pca")
a = selectVar(spca.mrna, comp = 1)$value
View(a)
var1pca = selectVar(spca.mrna, comp = 1)$value
name.var1pca = names(var1pca)
name.var1pca = names(var1pca)
name.var1pca
selectVar(spca.mrna, comp = 2)$value
var1pca
name.var1pca = colnames(var1pca)
name.var1pca
spca.mrna = spca(mrna.c, ncomp = 3, center = TRUE, scale = TRUE,
keepX = c(10, 5, 15))
var1pca = selectVar(spca.mrna, comp = 1)$value
name.var1pca = colnames(var1pca)
selectVar(spca.mrna, comp = 2)$value
name.var1pca = row.names(var1pca)
name.var1pca
name.var1pca = row.names(var1pca)[0:10]
name.var1pca
# PLS-DA
plsda.mrna = plsda(new_mrna, sample_group$Y, ncomp = 2)
plotIndiv(plsda.mrna)
plotIndiv(plsda.mrna, legend = T)
plotVar(plsda.mrna)
splsda.mrna = splsda(new_mrna, sample_group$Y, ncomp = 2,
keepX = c(10, 10))
plotIndiv(splsda.mrna)
plotIndiv(splsda.mrna, legend = T)
plotVar(splsda.mrna)
selectVar(splsda.mrna, comp = 1)$value
selectVar(splsda.mrna, comp = 2)$value
plsda.mrna = plsda(mrna.c, sample$Y, ncomp = 2)
plotIndiv(plsda.mrna, legend = T,
title = "Individus selon les 2 premieres composantes d'une PLS-DA")
list.of.all = list(mrna = mrna.c, prot = prot.c, mirna = mirna.c)
block.splsda.all = block.splsda(list.of.all,
Y = sample$Y, ncomp = 5)
plotIndiv(block.splsda.all, legend = T)
perf.splsda = perf(block.splsda.all)
perf.splsda
View(perf.splsda)
#Block PLS-DA avec keepX
list.keepX = list(mrna = c(15,10), prot = c(15,10), mirna = c(15,10))
block.splsda.keepX = block.splsda(list.of.all,
Y = sample_group$Y, ncomp = 2,
keepX = list.keepX)
plotIndiv(block.splsda.keepX, legend = T)
plotVar(block.splsda.keepX)
# Circosplot
circosPlot(block.splsda.keepX, cutoff = 0.5)
# Circosplot
circosPlot(block.splsda.keepX, cutoff = 0.8)
# Circosplot
circosPlot(block.splsda.keepX, cutoff = 0.7)
# Circosplot
circosPlot(block.splsda.keepX, cutoff = 0.6)
# Circosplot
circosPlot(block.splsda.keepX, cutoff = 0.5)
# Préparation des données
mirna = read.csv("./ParisDiderot_202010/mirna.csv")
row.names(mirna) = mirna[,1]
mirna = mirna[,-1]
mrna = read.csv("./ParisDiderot_202010/mrna.csv")
row.names(mrna) = mrna[,1]
mrna = mrna[,-1]
protein = read.csv("./ParisDiderot_202010/protein.csv")
row.names(protein) = protein[,1]
protein = protein[,-1]
sample_group = read.csv("./ParisDiderot_202010/sample_group.csv")
# Fonction de coefficient de variation
coeff_var = function(vec_val){
return(sd(vec_val)/mean(vec_val))
}
truehist(apply(mirna, 2, coeff_var), xlab = "Coefficient variation mirna")
truehist(apply(mrna, 2, coeff_var), xlab = "Coefficient variation mrna")
truehist(apply(protein, 2, coeff_var), xlab = "Coefficient variation protein")
# Filtrage des données
new_mirna = mirna[,(which(abs(apply(mirna, 2, coeff_var)) > 0.15))]
new_mrna = mrna[,(which(abs(apply(mrna, 2, coeff_var)) > 0.15))]
new_protein = protein[,(which(abs(apply(protein, 2, coeff_var)) > 0.15))]
# Ttrouver le gène avec la plus grand coefficient de variation
which(max(apply(new_mrna, 2, coeff_var)) == apply(new_mrna, 2, coeff_var))
# Gène avec le plus grand coefficient de variance : PLCD4
# Phospholipase C enzymes play a critical role in many cellular
# processes by hydrolyzing phosphatidylinositol 4,5-bisphosphate
# into two intracellular second messengers, inositol 1,4,5-trisphosphate
# and diacylglycerol. Expression of this gene may be a marker for cancer.
# Chromosome 2
# Longueur séquence 30 749 nucléotides
# Longueur acides aminés de la protéine Q9BRC7 762
## Partie II
## PCA
pca.mrna = pca(new_mrna, ncomp = 30, center = TRUE, scale = TRUE)
pca.mrna$cum.var
plotVar(pca.mrna, var.names = FALSE)
vec_col =  factor(sample_group$Y)
plotIndiv(pca.mrna, col.per.group = sample_group$Y)
## SPCA
spca.results = spca(new_mrna, ncomp = 3, center = TRUE, scale = TRUE,
keepX = c(10, 5, 15))
plotVar(spca.results)
## Gènes sélectionnés
selectVar(spca.results, comp = 1)$value
selectVar(spca.results, comp = 2)$value
## 2 projection latent structures (PLS)
pls_result = pls(X = new_mrna,Y = new_protein,ncomp = 3)
pls_result$loadings
pls_result$variates
pls_result$names
pls_result$loadings$X[,1]
par(mfrow = c(2,3))
############################################################
plot(pls_result$variates$X[,2],pls_result$variates$X[,3],
col =sample_group$Y ,
ylab = "composante 3",xlab = "composante 2",
main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
legend(x = 11, y = 8, names(table(sample_group$Y)), col = sample_group$X)
col = as.numeric(sample_group$Y)
plotArrow(pls_result,comp = c(1,3), X.label =  "comp1", Y.label = "comp3",col = as.numeric(sample_group$Y), title = "Arrow plot de composante 1 et 3")
l  = list()
l$new_mrna
spls_resulte = spls(X = new_mrna ,Y = new_protein ,ncomp =3,keepX =c(10,5,1) ,keepY =c(9,5,1) )
spls_resulte
cim(spls_resulte)
network(spls_resulte,cutoff = 0.65)
pls.result = pls(X = mrna.c, Y = prot.c, ncomp = 3)
pls.result$loadings
pls.result$variates
pls.result$names
pls.result$loadings$X[,1]
pls.result = pls(X = mrna.c, Y = prot.c, ncomp = 3)
plot(pls.result$variates$X[,2],pls.result$variates$X[,3],
col = sample$Y ,
ylab = "composante 3",xlab = "composante 2",
main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3],
col = sample$Y ,
ylab = "composante 3",xlab = "composante 2",
main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3],
col = sample$Y ,
ylab = "composante 3",xlab = "composante 2",
main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3],
col = sample$Y ,
ylab = "composante 3",xlab = "composante 2",
main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = sample$Y, ylab = "composante 3",xlab = "composante 2", main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = sample$Y)#, ylab = "composante 3",xlab = "composante 2", main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
png("scatter_plot_pls.png")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = sample$Y, ylab = "composante 3",xlab = "composante 2", main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
legend(x = 11, y = 8, names(table(sample$Y)), col = sample$X)
dev.off()
names(table(sample$Y))
col = sample$X
sample$X
legend(x = 11, y = 8, names(table(sample$Y)), col = sample$Y)
png("scatter_plot_pls.png")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = sample$Y, ylab = "composante 3",xlab = "composante 2", main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
legend(x = 11, y = 8, names(table(sample$Y)), col = sample$Y)
dev.off()
vec_col
vec_col = as.numeric(as.factor(sample$Y))
vec_col
png("scatter_plot_pls.png")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = sample$Y, ylab = "composante 3",xlab = "composante 2", main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
legend(x = 11, y = 8, names(table(sample$Y)), col = vec_col)
dev.off()
png("scatter_plot_pls.png")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = sample$Y, ylab = "composante 3",xlab = "composante 2", main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
legend(x = 10, y = 8, names(table(sample$Y)), col = vec_col)
dev.off()
names(table(sample$Y))
table(vec_col)
names(table(vec_col))
as.numeric(names(table(vec_col)))
png("scatter_plot_pls.png")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = sample$Y, ylab = "composante 3",xlab = "composante 2", main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
legend(x = 11, y = 8, legend = names(table(sample$Y)), col = as.numeric(names(table(vec_col))))
dev.off()
png("scatter_plot_pls.png")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = sample$Y, ylab = "composante 3",xlab = "composante 2", main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
legend(x = 11, y = 8, legend = names(table(sample$Y)), col = c(1,2,3))
dev.off()
png("scatter_plot_pls.png")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = sample$Y, ylab = "composante 3",xlab = "composante 2", main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
legend(x = 11, y = 8, legend = names(table(sample$Y)), col = c(1,2,3), lty = 2)
dev.off()
png("scatter_plot_pls.png")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = sample$Y, ylab = "composante 3",xlab = "composante 2", main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
legend(x = 11, y = 8, legend = names(table(sample$Y)), col = c(1,2,3), lty = 1)
dev.off()
png("scatter_plot_pls.png")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = sample$Y, ylab = "composante 3",xlab = "composante 2", main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
legend(x = 11, y = 8, legend = names(table(sample$Y)), col = c(1,2,3), lty = 1, lwd = 2)
dev.off()
png("scatter_plot_pls.png")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = sample$Y, ylab = "composante 3",xlab = "composante 2", main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
legend(x = 11, y = 8, legend = names(table(sample$Y)), col = c(1,2,3), lty = 3, lwd = 2)
dev.off()
png("scatter_plot_pls.png")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = sample$Y, ylab = "composante 3",xlab = "composante 2", main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
legend(x = 11, y = 8, legend = names(table(sample$Y)), col = c(1,2,3),lwd = 2)
dev.off()
png("scatter_plot_pls.png")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = sample$Y, ylab = "composante 3",xlab = "composante 2", main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
legend(x = 11, y = 8, legend = names(table(sample$Y)), col = c(1,2,3),lty = 5)
dev.off()
png("scatter_plot_pls.png")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = sample$Y, ylab = "composante 3",xlab = "composante 2", main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
legend(x = 10, y = 8, legend = names(table(sample$Y)), col = c(1,2,3), lty = 1)
dev.off()
png("scatter_plot_pls.png")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = sample$Y+1, ylab = "composante 3",xlab = "composante 2", main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
legend(x = 10, y = 8, legend = names(table(sample$Y)), col = c(2,3,4), lty = 1)
dev.off()
png("scatter_plot_pls.png")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = vec_col, ylab = "composante 3",xlab = "composante 2", main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
legend(x = 10, y = 8, legend = names(table(sample$Y)), col = c(2,3,4), lty = 1)
dev.off()
png("scatter_plot_pls.png")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = vec_col+1, ylab = "composante 3",xlab = "composante 2", main = "comparaisons des composante 1 et 2 avec les groupe\n d'echantillons afficher en couleur.")
legend(x = 10, y = 8, legend = names(table(sample$Y)), col = c(2,3,4), lty = 1)
dev.off()
plotArrow(pls.result, comp = c(1,3), X.label =  "comp1", Y.label = "comp3",col = vec_col, title = "Arrow plot de composante 1 et 3")
png("arrow_plot_pls.png")
plotArrow(pls.result, comp = c(1,3), X.label =  "comp1", Y.label = "comp3",col = vec_col, title = "Arrow plot de composante 1 et 3")
dev.off()
png("arrow_plot_pls.png")
plotArrow(pls.result, comp = c(1,3), X.label =  "comp1", Y.label = "comp3",col = vec_col+1, title = "Arrow plot de composante 1 et 3")
legend(x = 5, y = 5, legend = names(table(sample$Y)), col = c(2,3,4), lty = 1)
dev.off()
png("arrow_plot_pls.png")
plotArrow(pls.result, comp = c(1,3), X.label =  "comp1", Y.label = "comp3",col = vec_col+1, title = "Arrow plot de composante 1 et 3")
legend(x = 5, y = 6, legend = names(table(sample$Y)), col = c(2,3,4), lty = 1)
dev.off()
png("arrow_plot_pls.png")
plotArrow(pls.result, comp = c(1,3), X.label =  "comp1", Y.label = "comp3",col = vec_col+1, title = "Arrow plot de composante 1 et 3")
legend(x = 5, y = 8, legend = names(table(sample$Y)), col = c(2,3,4), lty = 1)
dev.off()
png("arrow_plot_pls.png")
plotArrow(pls.result, comp = c(1,3), X.label =  "comp1", Y.label = "comp3",col = vec_col+1, title = "Arrow plot de composante 1 et 3")
legend(x = 5, y = 10, legend = names(table(sample$Y)), col = c(2,3,4), lty = 1)
dev.off()
png("arrow_plot_pls.png")
plotArrow(pls.result, comp = c(1,3), X.label =  "comp1", Y.label = "comp3",col = vec_col+1, title = "Arrow plot de composante 1 et 3")
legend(x = 5, y = 9, legend = names(table(sample$Y)), col = c(2,3,4), lty = 1)
dev.off()
spls.resulte = spls(X = mrna.c, Y = prot.c, ncomp =3, keepX  = c(10,5,1), keepY = c(9,5,1) )
cim(spls.result)
spls.result = spls(X = mrna.c, Y = prot.c, ncomp =3, keepX  = c(10,5,1), keepY = c(9,5,1) )
cim(spls.result)
png("cim_plot_spls.png")
cim(spls.result)
dev.off()
selectVar(spls.result, comp = 3)$value
selectVar(spls.result, comp = 3)
spls.result
spls.result = spls(X = mrna.c, Y = prot.c, ncomp = 3, keepX  = c(10,5,1), keepY = c(9,5,1) )
var3spls = selectVar(spls.result, comp = 3)$value
var3spls
selectVar(spls.result, comp = 3)
selectVar(spls.result, comp = 1)
selectVar(spls.result, comp = 2)
selectVar(spls.result, comp = 3)
selectVar(spls.result, comp = 3)$X$name
var3spls = c(selectVar(spls.result, comp = 3)$X$name,
selectVar(spls.result, comp = 3)$Y$name)
var3spls
name.var3spls = row.names(var3spls)
name.var3spls
network(spls_resulte,cutoff = 0.65)
png("network_plot_spls.png")
network(spls.result,cutoff = 0.65)
spls.result = spls(X = mrna.c, Y = prot.c, ncomp = 3, keepX  = c(10,5,1), keepY = c(9,5,1) )
network(spls.result,cutoff = 0.65)
png("network_plot_spls.png")
network(spls.result,cutoff = 0.65)
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
png("network_plot_spls.png")
network(spls.result,cutoff = 0.65)
dev.off()
png("cim_plot_spls.png")
cim(spls.result)
dev.off()
network(omics.block.pls, cutoff = 0.65, name.save = "img/block-pls", save = "png")
omics.block.pls = block.pls(X = x.data, Y = y.data, ncomp = 2)
library("MASS")
#library("tidyverse")
library("mixOmics")
#library("timeOmics")
mirna = read.csv("ParisDiderot_202010/mirna.csv", header = T)
row.names(mirna) = mirna[,1]
mirna = mirna[,-1]
#dim(mirna)
mrna = read.csv("ParisDiderot_202010/mrna.csv", header = T)
row.names(mrna) = mrna[,1]
mrna = mrna[,-1]
#dim(mrna)
prot = read.csv("ParisDiderot_202010/protein.csv", header = T)
row.names(prot) = prot[,1]
prot = prot[,-1]
#dim(prot)
sample = read.csv("ParisDiderot_202010/sample_group.csv", header = T)
#dim(sample)
coeff_variation = function(vec){
return(sd(vec) / mean(vec))
}
truehist(apply(mirna, 2, coeff_variation), xlab = "Distribution du coeffcicient de variation - mirna")
truehist(apply(mrna, 2, coeff_variation), xlab = "Distribution du coeffcicient de variation - mrna")
truehist(apply(prot, 2, coeff_variation), xlab = "Distribution du coeffcicient de variation - proteine")
mirna.c = mirna[,which(abs(apply(mirna, 2, coeff_variation)) >= 0.15)]
#dim(mirna)
#dim(mirna.c)
mrna.c = mrna[,which(abs(apply(mrna, 2, coeff_variation)) >= 0.15)]
#dim(mrna)
#dim(mrna.c)
prot.c = prot[,which(abs(apply(prot, 2, coeff_variation)) >= 0.15)]
#dim(prot)
#dim(prot.c)
mrna.pca = tune.pca(X = mrna.c, ncomp = 50, center = F, scale = F)
mrna.pca = tune.pca(X = mrna.c, ncomp = 50, center = T, scale = T)
mrna.pca$cum.var
mrna.pca = pca(X = mrna.c, ncomp = 30, center = T, scale = T)
plotVar(mrna.pca, comp = c(1,2), var.names = T)
#plotVar(mrna.pca, comp = c(1,3), var.names = T)
var1pca = selectVar(mrna.pca, comp = 1)$value
name.var1pca = row.names(var1pca)[0:10]
vec_col = as.numeric(as.factor(sample$Y))
plotIndiv(mrna.pca, group = vec_col, legend = T, title = "Individus selon les 2 premieres composantes d'une pca")
spca.mrna = spca(mrna.c, ncomp = 3, center = TRUE, scale = TRUE,
keepX = c(10, 5, 15))
var1spca = selectVar(spca.mrna, comp = 1)$value
name.var1spca = row.names(var1spca)
var2spca = selectVar(spca.mrna, comp = 2)$value
name.var2spca = row.names(var2spca)
pls.result = pls(X = mrna.c, Y = prot.c, ncomp = 3)
png("img/scatter_plot_pls.png")
plot(pls.result$variates$X[,2],pls.result$variates$X[,3], col = vec_col+1, ylab = "composante 3",xlab = "composante 2", main = "comparaisons des composantes 1 et 2 avec les groupes\n d'echantillons affiches en couleur.")
legend(x = 10, y = 8, legend = names(table(sample$Y)), col = c(2,3,4), lty = 1)
dev.off()
png("img/arrow_plot_pls.png")
plotArrow(pls.result, comp = c(1,3), X.label =  "comp1", Y.label = "comp3",col = vec_col+1, title = "Arrow plot des composantes 1 et 3")
legend(x = 5, y = 9, legend = names(table(sample$Y)), col = c(2,3,4), lty = 1)
dev.off()
dev.off()
spls.result = spls(X = mrna.c, Y = prot.c, ncomp = 3, keepX  = c(10,5,1), keepY = c(9,5,1) )
var3spls = c(selectVar(spls.result, comp = 3)$X$name,
selectVar(spls.result, comp = 3)$Y$name)
png("img/cim_plot_spls.png")
cim(spls.result)
dev.off()
png("img/network_plot_spls.png")
network(spls.result,cutoff = 0.65)
dev.off()
x.data = list(mrna = mrna.c, prot = prot.c)
y.data = as.matrix(as.data.frame(mirna.c))
omics.block.pls = block.pls(X = x.data, Y = y.data, ncomp = 2)
#omics.block.pls
#selectVar(omics.block.pls, comp = 1)
#selectVar(omics.block.pls, comp = 2)
plotVar(omics.block.pls)
plotLoadings(omics.block.pls)
network(omics.block.pls, cutoff = 0.65, name.save = "img/block-pls", save = "png")
design = matrix(1, ncol = length(x.data), nrow = length(x.data),
dimnames = list(names(x.data), names(data)))
diag(design) = 0
#design
list.keepX = list(mrna = c(10, 5), prot = c(9, 4))
list.keepY = c(7, 3)
omics.block.spls = block.spls(X = x.data, Y = y.data, ncomp = c(2), keepX = list.keepX, keepY = list.keepY, design = design)
#omics.block.spls
#selectVar(omics.block.spls, comp = 1)
#selectVar(omics.block.spls, comp = 2)
plotVar(omics.block.spls)
plotLoadings(omics.block.spls)
network(omics.block.spls, cutoff = 0.65, name.save = "img/block-spls", save = "png")
mrna.selected = selectVar(omics.block.spls, comp = 1)$mrna$name
prot.selected = selectVar(omics.block.spls, comp = 1)$prot$name
mirna.selected = selectVar(omics.block.spls, comp = 1)$Y$name
plsda.mrna = plsda(mrna.c, sample$Y, ncomp = 2)
plotIndiv(plsda.mrna, legend = T,
title = "Individus selon les 2 premieres composantes d'une PLS-DA")
list.of.all = list(mrna = mrna.c, prot = prot.c, mirna = mirna.c)
block.splsda.all = block.splsda(list.of.all,
Y = sample$Y, ncomp = 5)
plotIndiv(block.splsda.all, legend = T)
perf.splsda = perf(block.splsda.all)
#Block PLS-DA avec keepX
list.keepX = list(mrna = c(15,10), prot = c(15,10), mirna = c(15,10))
block.splsda.keepX = block.splsda(list.of.all,
Y = sample$Y, ncomp = 2,
keepX = list.keepX)
plotIndiv(block.splsda.keepX, legend = T)
# Circosplot
circosPlot(block.splsda.keepX, cutoff = 0.5)
dev.off()
