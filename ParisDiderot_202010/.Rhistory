x2 = c(67:73) # Nombre mutants
n = 100 # Taille population
nb_obs = 1000000 # Nombre simulations
i = 1
# Vecteur des theta pour lesquels on retrouve xobs et nobs
vec_theta_s2 = c()
for (obs in 1:nb_obs) {
# Génération d'un theta dans une loi uniforme
theta_s = runif(1, min = 0, max = 1)
# Génération d'un xs selon le theta précédent
x_s = rbinom(1, 100, theta_s)
if(sum(x_s == x2)>0){
# Si xs = xobs, on retient le theta généré
vec_theta_s2[i] = theta_s
i= i+1
}
}
# Histogramme des valeurs de theta retenues
truehist(vec_theta_s2, ylim = c(0,8.5), main = "Valeurs theta dans la loi conjointe\n en elargissant le seuil d'acceptation", xlab = "valeurs theta")
# On superpose la même courbe que précédemment
lines(val_x, val_y, type = "l", col = "red")
IC2 = 1.96 * sd(vec_theta_s2) / sqrt(length(vec_theta_s2))
m_conj_IC_1_bis = mean(vec_theta_s2) - IC2
m_conj_IC_2_bis = mean(vec_theta_s2) + IC2
m_conj_IC_1
m_conj_IC_2
m_conj_IC_1_bis
m_conj_IC_2_bis
q025_IC = quantile(val_theta, 0.025, names = FALSE)
q075_IC = quantile(val_theta, 0.975, names = FALSE)
q025_IC
q075_IC
q025_conj_bis = quantile(vec_theta_s2, 0.025, names = FALSE)
q075_conj_bis = quantile(vec_theta_s2, 0.975, names = FALSE)
q075_conj_bis
q025_conj_bis
q025_conj
q025_conj = quantile(vec_theta_s, 0.025, names = FALSE)
q075_conj = quantile(vec_theta_s, 0.975, names = FALSE)
q025_conj
q075_conj
ab = c(1:100)
plot(ab, val_theta[100], type='l', main ="Profil de la chaine en fonction du temps",
xlab = "Nombre de simulations", ylab = "Valeur de la chaine")
ab = c(1:100)
plot(ab, val_theta[1:100], type='l', main ="Profil de la chaine en fonction du temps",
xlab = "Nombre de simulations", ylab = "Valeur de la chaine")
ab = c(1:1000)
plot(ab, val_theta[1:1000], type='l', main ="Profil de la chaine en fonction du temps",
xlab = "Nombre de simulations", ylab = "Valeur de la chaine")
ab = c(1:1000)
plot(ab, val_theta[1:10000], type='l', main ="Profil de la chaine en fonction du temps",
xlab = "Nombre de simulations", ylab = "Valeur de la chaine")
ab = c(1:10000)
plot(ab, val_theta[1:10000], type='l', main ="Profil de la chaine en fonction du temps",
xlab = "Nombre de simulations", ylab = "Valeur de la chaine")
BiocManager::install("mixOmics")
BiocManager::install("timeOmics")
install.packages("tidyverse")
library(tidyverse)
install.packages("rlang")
install.packages("rlang")
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("tibble")
install.packages("tibble")
library(tidyverse)
install.packages("dplyr")
setwd("/Users/MAEL/Documents/M2_BI/Genomique/omiques_floobits/droit_joly/ParisDiderot_202010")
library(mixOmics)
require(MASS)
mirna = read.csv("mirna.csv")
row.names(mirna) = mirna[,1]
mirna = mirna[,-1]
mrna = read.csv("mrna.csv")
row.names(mrna) = mrna[,1]
mrna = mrna[,-1]
protein = read.csv("protein.csv")
row.names(protein) = protein[,1]
protein = protein[,-1]
sample_group = read.csv("sample_group.csv")
coeff_var = function(vec_val){
return(mean(vec_val)/sd(vec_val))
}
truehist(apply(mirna, 2, coeff_var), xlab = "Coefficient variation mirna")
truehist(apply(mrna, 2, coeff_var), xlab = "Coefficient variation mrna")
truehist(apply(protein, 2, coeff_var), xlab = "Coefficient variation protein")
new_mirna = mirna[,(which(apply(mirna, 2, coeff_var) > 0.15))]
new_mrna = mrna[,(which(apply(mrna, 2, coeff_var) > 0.15))]
new_protein = protein[,(which(apply(protein, 2, coeff_var) > 0.15))]
which(max(apply(new_mrna, 2, coeff_var)) == apply(new_mrna, 2, coeff_var))
# Gène avec le plus grand coefficient de variance : KRT8
# Rôle maintaining cellular structural integrity,
# functions in signal transduction and cellular differentiation
# Chromosome 12
# Longueur séquence 52 670 nucléotides
# Longueur acides aminés de la protéine 483
pca.mrna = pca(new_mrna, ncomp = 32, center = TRUE, scale = TRUE)
pca.mrna$cum.var
names(pca.mrna)
plotVar(pca.mrna)
spca.results = spca(new_mrna, ncomp = 3, center = TRUE, scale = TRUE,
keepX = c(10, 5, 15))
plotVar(spca.results)
spca.results$keepX
selectVar(spca.result, comp = 1)$value
selectVar(spca.results, comp = 1)$value
selectVar(spca.results, comp = 2)$value
spca.results = spca(new_mrna, ncomp = 3, center = FALSE, scale = FALSE,
keepX = c(10, 5, 15))
plotVar(spca.results)
selectVar(spca.results, comp = 1)$value
selectVar(spca.results, comp = 2)$value
spca.results = spca(new_mrna, ncomp = 3, center = TRUE, scale = TRUE,
keepX = c(10, 5, 15))
plotVar(spca.results)
selectVar(spca.results, comp = 1)$value
selectVar(spca.results, comp = 2)$value
mirna = read.csv("mirna.csv")
row.names(mirna) = mirna[,1]
mirna = mirna[,-1]
mrna = read.csv("mrna.csv")
row.names(mrna) = mrna[,1]
mrna = mrna[,-1]
protein = read.csv("protein.csv")
row.names(protein) = protein[,1]
protein = protein[,-1]
sample_group = read.csv("sample_group.csv")
coeff_var = function(vec_val){
return(mean(vec_val)/sd(vec_val))
}
truehist(apply(mirna, 2, coeff_var), xlab = "Coefficient variation mirna")
truehist(apply(mirna, 2, coeff_var), xlab = "Coefficient variation mirna")
truehist(apply(mrna, 2, coeff_var), xlab = "Coefficient variation mrna")
apply(mrna, 2, coeff_var)
return(sd(vec_val)/mean(vec_val))
coeff_var = function(vec_val){
return(sd(vec_val)/mean(vec_val))
}
truehist(apply(mirna, 2, coeff_var), xlab = "Coefficient variation mirna")
truehist(apply(mrna, 2, coeff_var), xlab = "Coefficient variation mrna")
truehist(apply(protein, 2, coeff_var), xlab = "Coefficient variation protein")
(apply(mirna, 2, coeff_var)
)
(abs(apply(mirna, 2, coeff_var))
)
new_mirna = mirna[,(which(abs(apply(mirna, 2, coeff_var)) > 0.15))]
new_mrna = mrna[,(which(abs(apply(mrna, 2, coeff_var)) > 0.15))]
new_protein = protein[,(which(abs(apply(protein, 2, coeff_var)) > 0.15))]
which(max(apply(new_mrna, 2, coeff_var)) == apply(new_mrna, 2, coeff_var))
View(new_protein)
pca.mrna = pca(new_mrna, ncomp = 32, center = TRUE, scale = TRUE)
pca.mrna$cum.var
pca.mrna = pca(new_mrna, ncomp = 31, center = TRUE, scale = TRUE)
pca.mrna$cum.var
pca.mrna = pca(new_mrna, ncomp = 30, center = TRUE, scale = TRUE)
pca.mrna$cum.var
names(pca.mrna)
plotVar(pca.mrna)
tune.pca.mrna = tune.pca(new_mrna, ncomp = 30, center = TRUE, scale = TRUE)
tune.pca.mrna = tune.pca(new_mrna, ncomp = 30, center = FALSE, scale = FALSE)
hist(pca.mrna$cum.var)
plot(pca.mrna$cum.var)
pca.mrna$cum.var
names(pca.mrna)
plotVar(pca.mrna)
spca.results = spca(new_mrna, ncomp = 3, center = TRUE, scale = TRUE,
keepX = c(10, 5, 15))
plotVar(spca.results)
selectVar(spca.results, comp = 1)$value
selectVar(spca.results, comp = 2)$value
spca.results = spca(new_mrna, ncomp = 3, center = FALSE, scale = FALSE,
keepX = c(10, 5, 15))
plotVar(spca.results)
selectVar(spca.results, comp = 1)$value
selectVar(spca.results, comp = 2)$value
spca.results = spca(new_mrna, ncomp = 3, center = TRUE, scale = TRUE,
keepX = c(10, 5, 15))
plotVar(spca.results)
selectVar(spca.results, comp = 1)$value
selectVar(spca.results, comp = 2)$value
pls(mrna, protein, ncomp = 3)
pls(new_mrna, protein, ncomp = 3)
pls.mrna = pls(new_mrna, protein, ncomp = 3)
library(scatterplot3d)
View(pls.mrna)
scatterplot3d(pls.mrna)
scatterplot3d(pls.mrna$X, pls.mrna$Y)
scatterplot3d(pls.mrna$X)
plot(pls.mrna$X)
View(pls.mrna)
pls.mrna = plsda(new_mrna, protein, ncomp = 3)
data(liver.toxicity)
liver.toxicity
X <- as.matrix(liver.toxicity$gene)
Y <- as.factor(liver.toxicity$treatment[, 4])
## PLS-DA function
plsda.res <- plsda(X, Y, ncomp = 5)
plsda.res
plotArrow(plsda.res)
pls.mrna = plsda(new_mrna, protein, ncomp = 3)
sample_group
pls.mrna = plsda(new_mrna, sample_group$Y, ncomp = 3)
plot(pls.mrna)
plotArrow(pls.mrna)
pls.mrna = plsda(new_protein, sample_group$Y, ncomp = 3)
plotArrow(pls.mrna)
plotArrow(pls.mrna, comp = c(1,3))
plotArrow(pls.mrna, comp = c(1,3))
plotArrow(pls.mrna, comp = c(1,3))
plotArrow(pls.mrna, comp = c(1,3))
pls.mrna = plsda(new_mrna, sample_group$Y, ncomp = 3)
plotArrow(pls.mrna, comp = c(1,3))
pls.protein = plsda(new_protein, sample_group$Y, ncomp = 3)
plotArrow(pls.protein, comp = c(1,3))
plot(pls.mrna$X)
plot(pls.mrna$X, col = pls.mrna$Y)
pls.mrna$Y
plot(pls.mrna$X, col = pls.mrna$Y+1)
plot(pls.mrna$X, col = pls.mrna$Y)
plotIndiv(pls.mrna$X, col = pls.mrna$Y)
plotIndiv(pls.mrna$X)
plotIndiv(pls.mrna)
plotIndiv(pls.mrna, comp = c(2,3))
plotArrow(pls.mrna, comp = c(1,3))
plotIndiv(pls.protein, comp = c(2,3))
plotArrow(pls.protein, comp = c(1,3))
plotArrow(pls.protein, comp = c(1,3), xlab = "comp 1", ylab = "comp 3")
plotArrow(pls.protein, comp = c(1,3), X.label = "comp 1",
Y.label = "comp 3")
plotIndiv(pls.mrna, comp = c(2,3), X.label = "comp 2",
Y.label = "comp 3")
plotArrow(pls.mrna, comp = c(1,3), X.label = "comp 1",
Y.label = "comp 3")
pls.protein = plsda(new_protein, sample_group$Y, ncomp = 3)
plotIndiv(pls.protein, comp = c(2,3), X.label = "comp 2",
Y.label = "comp 3")
plotArrow(pls.protein, comp = c(1,3), X.label = "comp 1",
Y.label = "comp 3")
pls.mrna = plsda(new_mrna, sample_group$Y, ncomp = 2)
plotIndiv(pls.mrna)
plotVar(pls.mrna)
plotIndiv(pca.mrna)
plotIndiv(pca.mrna, col = sample_group$Y)
plotIndiv(pca.mrna, col.per.group = sample_group$Y)
vec_col =  factor(sample_group$Y)
vec_col
plotVar(pca.mrna)
# SPCA
spca.results = spca(new_mrna, ncomp = 3, center = TRUE, scale = TRUE,
keepX = c(10, 5, 15))
plotVar(spca.results)
plotVar(pca.mrna, var.names = FALSE)
vec_col =  factor(sample_group$Y)
vec_col
vec_col = ifelse(vec_col == Gr_1, 1, ifelse(vec_col == Gr_2, 2, 3))
vec_col = ifelse(vec_col == 'Gr_1', 1, ifelse(vec_col == 'Gr_2', 2, 3))
vec_col
plotIndiv(pca.mrna, col = vec_col)
plotIndiv(pca.mrna, col = vec_col+1)
# PLS-DA
plsda.mrna = plsda(new_mrna, sample_group$Y, ncomp = 2)
plotIndiv(plsda.mrna)
plotVar(plsda.mrna)
plotIndiv(spca.mrna, col = vec_col)
# SPCA
spca.mrna = spca(new_mrna, ncomp = 3, center = TRUE, scale = TRUE,
keepX = c(10, 5, 15))
plotIndiv(spca.mrna, col = vec_col)
plotVar(spca.mrna)
plotIndiv(spca.mrna, col = vec_col+1)
splsda.mrna = splsda(new_mrna, sample_group$Y, ncomp = 2,
keepX = c(10, 10))
selectVar(splsda.mrna, comp = 1)$value
selectVar(splsda.mrna, comp = 2)$value
plotIndiv(splsda.mrna)
plotIndiv(plsda.mrna)
plotVar(splsda.mrna)
#Block PLS-DA
block.plsda.all = block.plsda(list(mrna, prot, mirna), sample_group$Y, ncomp = 5)
#Block PLS-DA
block.plsda.all = block.plsda(list(new_mrna, new_protein, new_mirna),
sample_group$Y, ncomp = 5)
#Block PLS-DA
block.plsda.all = block.plsda(X = list(new_mrna, new_protein, new_mirna),
sample_group$Y, ncomp = 5)
#Block PLS-DA
block.plsda.all = block.plsda(X = list(new_mrna, new_protein, new_mirna),
Y = sample_group$Y, ncomp = 5)
#Block PLS-DA
block.plsda.all = block.plsda(X = cbind(new_mrna, new_protein, new_mirna),
Y = sample_group$Y, ncomp = 5)
block.plsda((X = list(mrna, prot, mirna)),
Y = sample_group$Y, ncomp = 5)
block.plsda((X = list(new_mrna, new_protein, new_mirna)),
Y = sample_group$Y, ncomp = 5)
block.plsda((X = list(new_mrna, new_protein, new_mirna)), ncomp = 5)
block.plsda((X = list(new_mrna, new_protein, new_mirna)),
Y = sample_group$Y, ncomp = 5)
block.splsda((X = list(new_mrna, new_protein, new_mirna)),
Y = sample_group$Y, ncomp = 5)
block.splsda((X = list(new_mrna, new_protein, new_mirna)),
Y = sample_group$Y, ncomp = 5)
cbind(new_mrna, new_protein, new_mirna)
a = cbind(new_mrna, new_protein, new_mirna)
all.bind = cbind(new_mrna, new_protein, new_mirna)
block.splsda((X = all.bind),
Y = sample_group$Y, ncomp = 5)
selectVar(pca.mrna, comp = 1)$value
data(nutrimouse)
View(nutrimouse)
data = list(gene = nutrimouse$gene, lipid = nutrimouse$lipid, Y = nutrimouse$diet)
data
# with this design, all blocks are connected
design = matrix(c(0,1,1,1,0,1,1,1,0), ncol = 3, nrow = 3,
byrow = TRUE, dimnames = list(names(data), names(data)))
design
res = block.plsda(X = data, indY = 3) # indY indicates where the outcome Y is in the list X
plotIndiv(res, ind.names = FALSE, legend = TRUE)
plotVar(res)
plotIndiv(res, ind.names = FALSE, legend = TRUE)
## Not run:
# when Y is provided
res2 = block.plsda(list(gene = nutrimouse$gene, lipid = nutrimouse$lipid),
Y = nutrimouse$diet, ncomp = 2)
plotIndiv(res2)
plotVar(res2)
nutrimouse$gene
data = list(gene = nutrimouse$gene, lipid = nutrimouse$lipid, Y = nutrimouse$diet)
View(data)
list.of.all = list(mrna = new_mrna, prot = new_protein, mirna = new_mirna)
View(list.of.all)
block.splsda(list.of.all,
Y = sample_group$Y, ncomp = 5)
block.plsda.all = block.splsda(list.of.all,
Y = sample_group$Y, ncomp = 5)
plotIndiv(block.plsda.all)
plotVar(block.plsda.all)
perf(block.splsda.all)
#Block PLS-DA
list.of.all = list(mrna = new_mrna, prot = new_protein, mirna = new_mirna)
block.splsda.all = block.splsda(list.of.all,
Y = sample_group$Y, ncomp = 5)
perf(block.splsda.all)
perf.splsda = perf(block.splsda.all)
perf.splsda$error.rate
# Example with multi omics TCGA study
# -----------------------------
data("breast.TCGA")
# this is the X data as a list of mRNA and miRNA; the Y data set is a single data set of proteins
data = list(mrna = breast.TCGA$data.train$mrna, mirna = breast.TCGA$data.train$mirna)
# set up a full design where every block is connected
design = matrix(1, ncol = length(data), nrow = length(data),
dimnames = list(names(data), names(data)))
diag(design) =  0
design
# set number of component per data set
ncomp = c(2)
# set number of variables to select, per component and per data set (this is set arbitrarily)
list.keepX = list(mrna = rep(20, 2), mirna = rep(10,2))
list.keepY = c(rep(10, 2))
breast.TCGA$data.train$protein
breast.TCGA$data.train
breast.TCGA$data.train$protein
data
x.data =
typeof(new_mirna)
#x.data =
typeof(new_mirna)
block.spls(X = x.data, Y = y.data)
x.data = list(mrna = new_mrna, prot = new_protein)
y.data = new_mirna
block.spls(X = x.data, Y = y.data)
block.spls(X = x.data, Y = as.matrix(as.numeric(y.data)))
y.data
as.numeric(y.data)
y.data = as.data.frame(new_mirna)
block.spls(X = x.data, Y = y.data)
y.data = as.data.frame(new_mirna)
block.spls(X = x.data, Y = y.data)
y.data = as.numeric(as.data.frame(new_mirna))
y.data = as.matrix(as.data.frame(new_mirna))
block.spls(X = x.data, Y = y.data)
setwd("/Users/MAEL/Documents/M2_BI/Genomique/omiques_floobits/droit_joly/ParisDiderot_202010")
require(MASS)
library(mixOmics)
# Préparation des données
mirna = read.csv("mirna.csv")
row.names(mirna) = mirna[,1]
mirna = mirna[,-1]
mrna = read.csv("mrna.csv")
row.names(mrna) = mrna[,1]
mrna = mrna[,-1]
protein = read.csv("protein.csv")
row.names(protein) = protein[,1]
protein = protein[,-1]
sample_group = read.csv("sample_group.csv")
# Fonction de coefficient de variation
coeff_var = function(vec_val){
return(sd(vec_val)/mean(vec_val))
}
truehist(apply(mirna, 2, coeff_var), xlab = "Coefficient variation mirna")
truehist(apply(mrna, 2, coeff_var), xlab = "Coefficient variation mrna")
truehist(apply(protein, 2, coeff_var), xlab = "Coefficient variation protein")
# Filtrage des données
new_mirna = mirna[,(which(abs(apply(mirna, 2, coeff_var)) > 0.15))]
new_mrna = mrna[,(which(abs(apply(mrna, 2, coeff_var)) > 0.15))]
new_protein = protein[,(which(abs(apply(protein, 2, coeff_var)) > 0.15))]
# Ttrouver le gène avec la plus grand coefficient de variation
which(max(apply(new_mrna, 2, coeff_var)) == apply(new_mrna, 2, coeff_var))
# Gène avec le plus grand coefficient de variance : PLCD4
# Phospholipase C enzymes play a critical role in many cellular
# processes by hydrolyzing phosphatidylinositol 4,5-bisphosphate
# into two intracellular second messengers, inositol 1,4,5-trisphosphate
# and diacylglycerol. Expression of this gene may be a marker for cancer.
# Chromosome 2
# Longueur séquence 30 749 nucléotides
# Longueur acides aminés de la protéine Q9BRC7 762
# PCA
pca.mrna = pca(new_mrna, ncomp = 30, center = TRUE, scale = TRUE)
pca.mrna$cum.var
plotVar(pca.mrna, var.names = FALSE)
vec_col = factor(sample_group$Y)
vec_col = ifelse(vec_col == 'Gr_1', 1, ifelse(vec_col == 'Gr_2', 2, 3))
plotIndiv(pca.mrna, col = vec_col+1)
selectVar(pca.mrna, comp = 1)$value
# SPCA
spca.mrna = spca(new_mrna, ncomp = 3, center = TRUE, scale = TRUE,
keepX = c(10, 5, 15))
plotVar(spca.mrna)
plotIndiv(spca.mrna, col = vec_col+1)
# Gènes sélectionnés
selectVar(spca.mrna, comp = 1)$value
selectVar(spca.mrna, comp = 2)$value
# PLS-DA
plsda.mrna = plsda(new_mrna, sample_group$Y, ncomp = 2)
plotIndiv(plsda.mrna)
plotVar(plsda.mrna)
splsda.mrna = splsda(new_mrna, sample_group$Y, ncomp = 2,
keepX = c(10, 10))
plotIndiv(splsda.mrna)
plotVar(splsda.mrna)
selectVar(splsda.mrna, comp = 1)$value
selectVar(splsda.mrna, comp = 2)$value
#Block PLS-DA
list.of.all = list(mrna = new_mrna, prot = new_protein, mirna = new_mirna)
block.splsda.all = block.splsda(list.of.all,
Y = sample_group$Y, ncomp = 5)
plotIndiv(block.splsda.all)
plotVar(block.splsda.all)
perf.splsda = perf(block.splsda.all)
#Block PLS-DA avec keepX
block.splsda.keepX = block.splsda(list.of.all,
Y = sample_group$Y, ncomp = 2,
keepX = c(15,10))
plotIndiv(block.splsda.keepX)
plotVar(block.splsda.keepX)
#Block PLS-DA avec keepX
block.splsda.keepX = block.splsda(list.of.all,
Y = sample_group$Y, ncomp = 2,
keepX = c(15,10))
#Block PLS-DA avec keepX
block.splsda.keepX = block.splsda(list.of.all,
Y = sample_group$Y, ncomp = 2,
keepX = list(15,10))
#Block PLS-DA
list.of.all = list(mrna = new_mrna, prot = new_protein, mirna = new_mirna)
block.splsda.all = block.splsda(list.of.all,
Y = sample_group$Y, ncomp = 5)
plotIndiv(block.splsda.all)
plotVar(block.splsda.all)
perf.splsda = perf(block.splsda.all)
#Block PLS-DA avec keepX
list.keepX = list(mrna = c(15,10), prot = c(15,10), mirna = c(15,10))
block.splsda.keepX = block.splsda(list.of.all,
Y = sample_group$Y, ncomp = 2,
keepX = list.keepX)
plotIndiv(block.splsda.keepX)
plotVar(block.splsda.keepX)
# Circosplot
circosPlot(block.splsda.keepX)
vec_col = as.numeric(as.factor(sample_group$Y))
vec_col
# Circosplot
circosPlot(block.splsda.keepX, cutoff = 0.5)
data(nutrimouse)
Y = nutrimouse$diet
data = list(gene = nutrimouse$gene, lipid = nutrimouse$lipid)
design = matrix(c(0,1,1,1,0,1,1,1,0), ncol = 3, nrow = 3, byrow = TRUE)
nutrimouse.sgccda <- wrapper.sgccda(X=data,
Y = Y,
design = design,
keepX = list(gene=c(10,10), lipid=c(15,15)),
ncomp = 2,
scheme = "horst")
circosPlot(nutrimouse.sgccda, cutoff = 0.7, ncol.legend = 2, size.legend = 1.1)
## Not run:
circosPlot(nutrimouse.sgccda, cutoff = 0.7, ncol.legend = 2, size.legend = 1.1,
color.Y = 1:5, color.blocks = c("green","brown"), color.cor = c("magenta", "purple"))
par(mfrow=c(2,2))
circosPlot(nutrimouse.sgccda, cutoff = 0.7, ncol.legend = 2,
size.legend = 1.1)
circosPlot(nutrimouse.sgccda, cutoff = 0.7, ncol.legend = 2,
size.legend = 1.1, showIntraLinks = TRUE)
circosPlot(nutrimouse.sgccda, cutoff = 0.7, ncol.legend = 1,
size.legend = 1.1, showIntraLinks = TRUE)
circosPlot(nutrimouse.sgccda, cutoff = 0.7, ncol.legend = 2,
size.legend = 1.1, showIntraLinks = TRUE, line = FALSE, size.variables = 0.5)
dev.off()
# Circosplot
circosPlot(block.splsda.keepX, cutoff = 0.5)
